import os
import pandas as pd
import joblib
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
train_path = "train/train_scaled.csv"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ train_scaled.csv
if not os.path.exists(train_path):
    raise FileNotFoundError("‚ùå –§–∞–π–ª train_scaled.csv –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ data_preprocessing.py!")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
df = pd.read_csv(train_path)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏
target = "Calories"
if target not in df.columns:
    raise KeyError(f"‚ùå –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{target}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö!")

X = df.drop(columns=[target])  # –ü—Ä–∏–∑–Ω–∞–∫–∏
y = df[target]  # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
numeric_features = X.select_dtypes(include=["int64", "float64"]).columns.tolist()
categorical_features = X.select_dtypes(include=["object"]).columns.tolist()

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train –∏ validation (80% - –æ–±—É—á–µ–Ω–∏–µ, 20% - –≤–∞–ª–∏–¥–∞—Ü–∏—è)
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∏ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
preprocessor = ColumnTransformer([
    ("num", StandardScaler(), numeric_features),
    ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_features)
])

# –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω: —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è + –º–æ–¥–µ–ª—å
model = Pipeline([
    ("preprocessor", preprocessor),
    ("regressor", LinearRegression())
])

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model.fit(X_train, y_train)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ validation
y_pred = model.predict(X_val)

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
mae = mean_absolute_error(y_val, y_pred)
mse = mean_squared_error(y_val, y_pred)
r2 = r2_score(y_val, y_pred)

# –í—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫
print("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞!")
print(f"üìä MAE: {mae:.2f}")
print(f"üìä MSE: {mse:.2f}")
print(f"üìä R¬≤ Score: {r2:.2f}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model_path = "model/calories_model.pkl"
os.makedirs("model", exist_ok=True)
joblib.dump(model, model_path)

print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {model_path}")
